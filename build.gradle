buildscript {
   
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
	//id 'org.sonarqube'
	id 'war'
	id 'application'
	
}

apply plugin: 'org.sonarqube'
apply plugin: 'docker'

group = 'com.PostMap.demo-1'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
mainClassName = 'com.PostMap.demo.PostMappingDemo1Application'

def buildResources = 'build'

/*
sonarqube{
	properties{
		property "sonar.projectKey",rootProject.name
		property "sonar.projectName", rootProject.name
		property "sonar.jacoco.reportPath", "$buildResources/jacoco/test.exec"
		//property "sonar.coverage.jacoco.xmlReportPaths","$buildResources/reports/jacoco/test/jacocoTestReport"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "60986ce502f60c6e7f0fd9c5a87e112110ff9fb1"
		property "sonar.java.binaries","build/classes"
	
	}
}
*/

repositories {
	mavenCentral()
}

 //build.finalizedBy jacocoTestReport 
  
dependencies {
	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.2'
	compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.2.4.RELEASE'
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.0.2'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testCompile group: 'junit', name: 'junit', version: '4.13'
	compileOnly group: 'org.projectlombok', name: 'lombok', version:'1.18.12'
	
}


  	test.finalizedBy { 
  	jacocoTestReport{
    reports {
        xml.enabled true 
     }
  }

  	/*
  	jacocoTestCoverageVerification {
  		  violationRules {
		    rule {
		      limit {
		        counter = 'LINE'
		        value = 'TOTALCOUNT'
		        minimum = 1.0
		      }
		    }
		  }
  		
  		}
  		*/
  	}
  	
test {
	useJUnitPlatform()
	//jacocoTestReport

}

task buildDocker(type: Docker, dependsOn: build) {
   applicationName = jar.baseName
   dockerfile = file('src/main/docker/Dockerfile')
   doFirst {
      copy {
         from jar
         into stageDir
      }
   }
}
